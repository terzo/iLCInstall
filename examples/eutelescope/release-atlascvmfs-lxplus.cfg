# this config file is actually python code, just to let emacs know: -*- mode: Python; -*-
##############################################################################
#
# Configuration file for installing EUTelescope 
#        and the required ILC Software Packages
#
# This config sets up a standalone installation
# (i.e. does not link to an existing AFS installation of ILCSoft)
# 
# You might want to change the following variables:
#
# To find ilcsoft's release-version.py with all default settings for package versions 
# (this is the version string in ilcinstall/releases/VERSION/release-versions.py)
# Set to 'auto' to search for latest version.
target_ilcinstall_version = "auto"
#
# Whether or not to create 32 bit binaries on 64bit systems:
# (32bit systems will automatically be switched to 32 bits)
force_32bit = False
#
##############################################################################


# --------- set up package versions with ilcsoft's defaults: ------------

import os, sys
import platform
from distutils.version import StrictVersion, LooseVersion

# read package versions from external file provided by ilcinstall
path_where_this_file_lives = os.path.dirname( config_file )
where_ilcinstall_lives = os.path.dirname(os.path.abspath(__file__))
versions_file = ""
if target_ilcinstall_version == "auto":
    # search for latest version in releases subdirectory
    latest = ""
    for name in os.listdir(os.path.join( where_ilcinstall_lives, "releases")):
        if os.path.isdir(os.path.join( where_ilcinstall_lives, "releases",name)):
            if latest:
                if LooseVersion(latest)<LooseVersion(name):
                    latest = name
            else:
                latest = name
    if latest:
        versions_file = os.path.join( where_ilcinstall_lives, "releases", latest,"release-versions.py" )
    else:
        print "Error: could not determine latest ILCSoft version!"
else:
    versions_file = os.path.join( where_ilcinstall_lives, "releases", target_ilcinstall_version,"release-versions.py" )

# the default versions file contructs a path using ilcsoft_afs_path[arch] 
# which fails if ilcsoft is not yet set up with this gcc version;
# therefore create fake entry here
ilcsoft_afs_path[arch] = ""
execfile( versions_file ) # !some settings are overwritten below: install dir, versions depending on distr.


# --------- determine install dir (OVERWRITING DEFAULT) ----------------------------------------------
# should be set by the user by setting the ILCSOFT environment variable
# e.g. "export ILCSOFT=~/ilcsoft"
if not os.environ.get('ILCSOFT') is None:
    ilcsoft_install_prefix = str(os.environ.get('ILCSOFT'))
else:
    ilcsoft_install_prefix = "/opt/ilcsoft"
ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )
# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# -- overwrites setting in release-versions.py! --
ilcPath = ilcsoft_install_prefix

if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# --------- package versions and paths (distribution dependent) --------------------------
# access to platform parameters: 
# platform.dist()[0] (dist short name), platform.dist()[1] (version) platform.dist()[2] (version short name)

# adjustments for the standalone installation:
Java_path = "/usr"
CERNLIB_path = "/usr"
XERCESC_ROOT_DIR = os.path.join(ilcPath , "xercesc/2.7.0") # xerces-c (needed by geant4 for gdml support - required by mokka)
GSL_path = "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/gsl/2.1-x86_64-slc6-gcc62-opt/"
CMake_path = "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/Cmake/3.11.0/Linux-x86_64/"

# ------------------ global compiler options -----------------------------------------------
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
ilcsoft.env["CXXFLAGS"]="-std=c++14 -fPIC"
#--------- to build 32-bit mode on 64bit machines set force_32bit in the beginning of this file ---
if force_32bit or platform.machine() == "i386":
   ilcsoft.env["CXXFLAGS"]="-m32 -std=c++14 -fPIC"
   ilcsoft.env["CFLAGS"]="-m32"
   ilcsoft.env["FFLAGS"]="-m32"
   ilcsoft.env["LDFLAGS"]="-m32"
   ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="ON"
#----------------------------------------------------------------

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"

ilcsoft.envcmake["CMAKE_CXX_STANDARD"]=14
ilcsoft.envcmake["CMAKE_CXX_STANDARD_REQUIRED"]="ON"
ilcsoft.envcmake["CMAKE_CXX_EXTENSIONS"]="OFF"

ilcsoft.downloadType = "svn"

#-------------------------------------------------------------------------
# prerequisites: installed versions of Java, geant4, cernlib and mysql:
#  -> modify according to your system !
#-------------------------------------------------------------------------

#  when using 'link' or 'use' please specify full path to installed package
#  or use the version installed in afs (ilcPath) 

# Java
if 'Java_path' in dir():
    ilcsoft.use( Java( Java_path ))

ilcsoft.install( Eigen( Eigen_version ) )

ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( LCIO( LCIO_version )) 

#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='OFF'
ilcsoft.module("LCIO").envcmake['INSTALL_JAR']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'

ilcsoft.install( GEAR( GEAR_version )) 
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'

ilcsoft.install( LCCD( LCCD_version ))
ilcsoft.module("LCCD").envcmake['LCCD_CONDDBMYSQL']='OFF'

ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.install( CED( CED_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 'OFF'

#---------test beam packages 
ilcsoft.install( Eutelescope( Eutelescope_version ))
ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']= Eudaq_version
ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']= Millepede2_version

#------- external packages
ilcsoft.use( ROOT( str(os.environ.get('ROOTSYS')) ))
ilcsoft.install( CLHEP( CLHEP_version))
ilcsoft.use( GSL( GSL_path )) 
ilcsoft.use( CMake( CMake_path )) 
# end of configuration file
